Shader "Hidden/PostProcessing/DeferredFog"
{
    HLSLINCLUDE

        #pragma multi_compile __ FOG_LINEAR FOG_EXP FOG_EXP2

#pragma multi_compile __ LUXWATERENABLED

        #include "../StdLib.hlsl"
        #include "Fog.hlsl"

        TEXTURE2D_SAMPLER2D(_MainTex, sampler_MainTex);
        TEXTURE2D_SAMPLER2D(_CameraDepthTexture, sampler_CameraDepthTexture);

TEXTURE2D_SAMPLER2D(_UnderWaterMask, sampler_UnderWaterMask);

        #define SKYBOX_THREASHOLD_VALUE 0.9999

inline float DecodeFloatRG( float2 enc )
{
    float2 kDecodeDot = float2(1.0, 1/255.0);
    return dot( enc, kDecodeDot );
}     

        float4 Frag(VaryingsDefault i) : SV_Target
        {
            half4 color = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, i.texcoordStereo);

            float depth = SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, sampler_CameraDepthTexture, i.texcoordStereo);
            depth = Linear01Depth(depth);
            float dist = ComputeFogDistance(depth);
            half fog = 1.0 - ComputeFog(dist);

#if defined(LUXWATERENABLED)

    half4 fogMask = SAMPLE_TEXTURE2D(_UnderWaterMask, sampler_UnderWaterMask, i.texcoordStereo);

    float watersurfacefrombelowdepth = DecodeFloatRG(fogMask.ba);
    float fogFactor = 1.0 -  saturate(150 * (depth - watersurfacefrombelowdepth)); // smooth transition
    

    fogFactor = (fogMask.r == 1) ? fogFactor : 1.0; // clamp to water surface
    fogFactor *= saturate( 1.0 - fogMask.g * 8); // mask fog on underwater parts

    fog *= fogFactor;
#endif            


            return lerp(color, _FogColor, fog);
        }

        float4 FragExcludeSkybox(VaryingsDefault i) : SV_Target
        {
            half4 color = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, i.texcoordStereo);

            float depth = SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, sampler_CameraDepthTexture, i.texcoordStereo);
            depth = Linear01Depth(depth);
            float skybox = depth < SKYBOX_THREASHOLD_VALUE;
            float dist = ComputeFogDistance(depth);
            half fog = 1.0 - ComputeFog(dist);

#if defined(LUXWATERENABLED)

    half4 fogMask = SAMPLE_TEXTURE2D(_UnderWaterMask, sampler_UnderWaterMask, i.texcoordStereo);

    float watersurfacefrombelowdepth = DecodeFloatRG(fogMask.ba);
    float fogFactor = 1.0 -  saturate(1 * (depth - watersurfacefrombelowdepth)); // smooth transition
    fogFactor = (fogMask.r == 1) ? fogFactor : 1.0; // clamp to water surface
    fogFactor *= saturate( 1.0 - fogMask.g * 8); // mask fog on underwater parts

    fog *= fogFactor;

#endif 

            return lerp(color, _FogColor, fog * skybox);
        }

    ENDHLSL

    SubShader
    {
        Cull Off ZWrite Off ZTest Always

        Pass
        {
            HLSLPROGRAM

                #pragma vertex VertDefault
                #pragma fragment Frag

            ENDHLSL
        }

        Pass
        {
            HLSLPROGRAM

                #pragma vertex VertDefault
                #pragma fragment FragExcludeSkybox

            ENDHLSL
        }
    }
}
